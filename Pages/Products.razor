@page "/products"
@inject NavigationManager NavManager

@using BisleriumCafe.Data
@using BisleriumCafe.Data.Services
@using BisleriumCafe.Data.Models
@inject ISnackbar Snackbar
@using System.ComponentModel.DataAnnotations

 
<MudContainer Class="mt-8">
    <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@AllProducts" Hover="true" Striped="false" Filter="new Func<Product,bool>(FilterHandler)" @bind-SelectedItem="selectedItem" SortLabel="Sort By">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Products</MudText>
            <MudSpacer />
            <MudTextField T="string" @bind-Value="toSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
            <MudSpacer/>
            @if (_globalState.CurrentUser != null && _globalState.CurrentUser.Role == Role.Admin)
            {
                <MudButton Variant="Variant.Outlined" OnClick="ToggleAddDrinkDialog" Color="Color.Primary">Add Drink</MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Outlined" OnClick="ToggleAddExtraDialog" Color="Color.Primary">Add Extra</MudButton>
                <MudSpacer />
            }
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel Enabled="true" InitialDirection="SortDirection.Ascending" SortBy="new Func<Product, object>(x => x.ProductName)">Product Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x => x.ProductType)">Type</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x => x.Price)">Price</MudTableSortLabel></MudTh>
            @if (_globalState.CurrentUser != null && _globalState.CurrentUser.Role == Role.Admin)
            {
                <MudTh>Actions</MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Product Name">@context.ProductName</MudTd>
                <MudTd DataLabel="Type">@context.ProductType</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>
                @if (_globalState.CurrentUser != null && _globalState.CurrentUser.Role == Role.Admin)
            {
                <MudTd DataLabel="Actions">
                    <MudButton Variant="Variant.Outlined" Color="Color.Info" StartIcon="@Icons.Material.Rounded.Edit" OnClick="@(() => ProcessEditDetails(context.ProductId.ToString()))">Edit</MudButton>
                </MudTd>
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

<MudDialog @bind-IsVisible="isAddDrinkDialogVisible" Options="dialogAddDrinkOptions" Class="pb-4">
    <DialogContent>
        <div style="width:500px;" class="d-flex flex-column">
            <MudCardHeader Class="justify-content-center"><MudText Typo="Typo.h4">Enter Drink Details</MudText></MudCardHeader>

            <MudTextField @bind-Value="productName" T="string" Required="true" Label="Drink Name" RequiredError=" Drink name is required!" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="price" Label="Price" Type="InputType.Number" Required="true" RequiredError="Price is required!" Variant="Variant.Outlined" />
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto" OnClick="HandleAddDrink">Add</MudButton>
        <MudButton Variant="Variant.Filled" Class="mx-auto" OnClick="CloseDialog1">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="isAddExtraDialogVisible" Options="dialogAddExtraOptions" Class="pb-4">
    <DialogContent>
        <div style="width:500px;" class="d-flex flex-column">
            <MudCardHeader Class="justify-content-center"><MudText Typo="Typo.h4">Enter Add-In Details</MudText></MudCardHeader>
            <MudTextField @bind-Value="productName" T="string" Required="true" Label="Addin Name" RequiredError=" AddIn name is required!" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="price" Label="Price" Type="InputType.Number" Required="true" RequiredError="Price is required!" Variant="Variant.Outlined" />
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto" OnClick="HandleAddExtra">Add</MudButton>
        <MudButton Variant="Variant.Filled" Class="mx-auto" OnClick="CloseDialog2">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private IEnumerable<Product> AllProducts = new List<Product>();
    MudForm AddProductForm;
    private string productName { get; set; }
    private float price { get; set; }
    private ProductType prodtype { get; set; }
    private Product ProductModel { get; set; }

    private string _activeItem = null;

    protected override async Task OnInitializedAsync()
    {
        if (_globalState.CurrentUser == null)
        {
            NavManager.NavigateTo("/login");
        }

        AllProducts = ProductsService.GetAll();

    }

    

    private bool isAddDrinkDialogVisible;
    private bool isAddExtraDialogVisible;
    private DialogOptions dialogAddDrinkOptions = new() { FullWidth = true };
    private DialogOptions dialogAddExtraOptions = new() { FullWidth = true };

    private void CloseDialog1()
    {
        isAddDrinkDialogVisible = false;
    }

    private void CloseDialog2()
    {
        isAddExtraDialogVisible = false;
    }
    private void ToggleAddDrinkDialog()
    {
        isAddDrinkDialogVisible = !isAddDrinkDialogVisible;
    }
    private void ToggleAddExtraDialog()
    {
        isAddExtraDialogVisible = !isAddExtraDialogVisible;
    }

    private string toSearch = ""; //String to used to search in  table
    private Product selectedItem = null; //Initializing selected item from products

    //Filters the item to search from elements in table
    private bool FilterHandler(Product item) => SearchFilter(item, toSearch);

    //Checks if there is a value returned fron the search by passing the search string and product values
    private bool SearchFilter(Product item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.ProductName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    private async Task HandleAddDrink()
    {
        try
        {
            if (string.IsNullOrEmpty(productName) || price<=0)
            {
                Snackbar.Add("Please enter all values!", Severity.Error, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
                isAddDrinkDialogVisible = true;
            }
            else
            {
                ProductsService.Create(productName, ProductType.Drink, price);
                isAddDrinkDialogVisible = false;
                Snackbar.Add("Drink is Added!", Severity.Success, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
            }
            Reload();
        }
        catch (Exception e)
        {
            Snackbar.Add("Incorrect values!", Severity.Error, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
        }
    }
    private async Task HandleAddExtra()
    {
        try
        {
            if (string.IsNullOrEmpty(productName) || price<=0)
            {
                Snackbar.Add("Please enter all values!", Severity.Error, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
                isAddExtraDialogVisible = true;
            }
            else
            {
                ProductsService.Create(productName, ProductType.AddIn, price);
                isAddExtraDialogVisible = false;
                Snackbar.Add("Item is Added!", Severity.Success, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
            }
            Reload();
        }
        catch (Exception e)
        {
            Snackbar.Add("Incorrect values!", Severity.Error, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
        }
    }

    private void ProcessEditDetails(string productID)
    {

        NavManager.NavigateTo($"edit-product/{productID}");
    }

    private async void Reload()
    {
        AllProducts = ProductsService.GetAll();
        StateHasChanged();
    }

}