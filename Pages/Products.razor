@page "/products"
@inject NavigationManager NavManager

@using BisleriumCafe.Data
@using BisleriumCafe.Data.Services
@using BisleriumCafe.Data.Models
@inject ISnackbar Snackbar
@using System.ComponentModel.DataAnnotations


<MudContainer>
    @if (_globalState.CurrentUser != null && _globalState.CurrentUser.Role == Role.Admin)
    {
        <MudButton Class="position-absolute" Variant="Variant.Filled" OnClick="ToggleAddDrinkPopover">Add Drink</MudButton>
        <MudButton Class="position-absolute" Style="top: 60px; right:60px;" Variant="Variant.Filled" OnClick="ToggleAddExtraPopover">Add Extra</MudButton>
    }
</MudContainer>
<MudContainer Class="mt-8">
    <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@AllProducts" Hover="true" Striped="false" Filter="new Func<Product,bool>(FilterHandler)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Products</MudText>
            <MudSpacer />

            <MudSpacer />
            <MudTextField T="string" @bind-Value="toSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Product, object>(invItem => invItem.ProductName)">Product Name</MudTableSortLabel></MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Product Name">@context.ProductName</MudTd>
                <MudTd DataLabel="Type">@context.ProductType</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>
                @if (_globalState.CurrentUser != null && _globalState.CurrentUser.Role == Role.Admin)
            {
                <MudTd DataLabel="Actions">
                    <MudButton Variant="Variant.Outlined" Color="Color.Info" StartIcon="@Icons.Material.Rounded.Edit" OnClick="@(() => ProcessEditDetails(context.ProductId.ToString()))">Edit</MudButton>
                </MudTd>
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

</MudContainer>

<MudPopover OverflowBehavior="OverflowBehavior.FlipNever" Open="@showAddDrinkPopOver" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" Class="pa-4 rounded-3" Style="width:40%;">
    <MudForm Model="@ProductModel" @ref="AddProductForm">
        <MudCardHeader><MudText Typo="Typo.h4">Add Drink</MudText></MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="productName" T="string" Required="true" Label="Product Name" RequiredError=" Product name is required!" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="price" Label="Price" Type="InputType.Number" Required="true" RequiredError="Price is required!" Variant="Variant.Outlined" />
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 mx-auto" OnClick="HandleAddDrink">Add</MudButton>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-4 mx-auto" OnClick="ToggleAddDrinkPopover">Close</MudButton>
        </MudCardActions>
    </MudForm>
</MudPopover>

<MudPopover OverflowBehavior="OverflowBehavior.FlipNever" Open="@showAddExtraPopOver" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" Class="pa-4 rounded-3" Style="width:40%;">
    <MudForm Model="@ProductModel" @ref="AddProductForm">
        <MudCardHeader><MudText Typo="Typo.h4">Add Ins</MudText></MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="productName" T="string" Required="true" Label="Product Name" RequiredError=" Product name is required!" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="price" Label="Price" Type="InputType.Number" Required="true" RequiredError="Price is required!" Variant="Variant.Outlined" />
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 mx-auto" OnClick="HandleAddExtra">Add</MudButton>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-4 mx-auto" OnClick="ToggleAddExtraPopover">Close</MudButton>
        </MudCardActions>
    </MudForm>
</MudPopover>



@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private IEnumerable<Product> AllProducts = new List<Product>();
    MudForm AddProductForm;
    private string productName { get; set; }
    private float price { get; set; }
    private ProductType prodtype { get; set; }
    private Product ProductModel { get; set; }

    private string _activeItem = null;

    protected override async Task OnInitializedAsync()
    {
        if (_globalState.CurrentUser == null)
        {
            NavManager.NavigateTo("/login");
        }

        AllProducts = ProductsService.GetAll();

    }

    private string toSearch = ""; //String to use for searching in the table
    private Product selectedItem = null;

    private bool showAddDrinkPopOver = false;
    private bool showAddExtraPopOver = false;
    private bool showEditPopOver = false;

    private bool FilterHandler(Product item) => SearchFilter(item, toSearch);

    private bool SearchFilter(Product item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.ProductName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private void ToggleAddDrinkPopover()
    {
        showAddDrinkPopOver = !showAddDrinkPopOver;
    }
    private void ToggleAddExtraPopover()
    {
        showAddExtraPopOver = !showAddExtraPopOver;
    }
    private void ToggleEditPopover(String id)
    {
        _activeItem = id;
        showEditPopOver = !showEditPopOver;
    }

    private async Task HandleAddDrink()
    {
        try
        {
            ProductsService.Create(productName, ProductType.Drink, price);
            if (_globalState.CurrentUser != null)
            {
                NavManager.NavigateTo("/products");
            }

        }
        catch (Exception e)
        {
            Snackbar.Add("Incorrect !", Severity.Error, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
            AddProductForm.Reset();
        }
    }
    private async Task HandleAddExtra()
    {
        try
        {
            ProductsService.Create(productName, ProductType.AddIn, price);
            if (_globalState.CurrentUser != null)
            {
                NavManager.NavigateTo("/products");
            }

        }
        catch (Exception e)
        {
            Snackbar.Add("Incorrect !", Severity.Error, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
            AddProductForm.Reset();
        }
    }



    private void ProcessEditDetails(string productID)
    {

        NavManager.NavigateTo($"edit-product/{productID}");
    }

    

}