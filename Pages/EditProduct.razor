@page "/edit-product/{productId}"
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<MudContainer Class="mt-8">
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowBack" Class="pb-5, mx-4" OnClick="goBack">
        Back
    </MudButton>


    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
    }

    <MudSpacer/>

    @if (product != null)
    {
        <div class="container-fluid mt-5">
            <div class="row">
                <div class="col-6 d-flex flex-column gap-y-3">
                    <MudCardHeader Class="justify-content-center"><MudText Typo="Typo.h4">Edit Product Details</MudText></MudCardHeader>
                    <MudText>Product name: @product.ProductName</MudText>
                    <MudTextField @bind-Value="product.Price" Label="Price" Variant="Variant.Outlined"></MudTextField>
                    <div>
                        <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Class="mt-5" OnClick="handleUpdate">
                            Update Price
                        </MudButton>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <MudAlert Severity="Severity.Error">Invalid Coffee ID</MudAlert>
    }
</MudContainer>
<MudDialog @bind-IsVisible="isVisible" Options="dialogOptions">
    <DialogContent>
        <MudCardContent>
            <MudTextField @bind-Value="Password" T="string" Label="Password" Required="true" RequiredError="Password is required!" InputType="InputType.Password" Variant="Variant.Outlined" />
        </MudCardContent>
    </DialogContent>
        <DialogActions>
            <MudButton OnClick="ConfirmAdminDetails" Color="Color.Primary">Confirm</MudButton>
            <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
        </DialogActions>
    </MudDialog>



@code {
    [Parameter]
    public string productId { get; set; }

    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    private string _errorMessage { get; set; } = "";


    private Product product { get; set; }

    private string Password { get; set; }
    private bool isVisible;
    private DialogOptions dialogOptions = new() { FullWidth = true };


    protected override void OnInitialized()
    {
        product = ProductsService.GetProductByID(productId);
    }

    protected void goBack()
    {
        NavManager.NavigateTo("/products");
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/products");
    }

    protected void handleUpdate()
    {
        isVisible = true;
    }
    protected void ConfirmAdminDetails()
    {
        try
        {
            if (UsersService.ValidateAdministrator(Password))
            {
                Snackbar.Add("Administrator Verified", Severity.Success);
                isVisible = false;
                if (product.Price <= 0)
                {
                    _errorMessage = "Please enter valid price";
                    return;
                }

                ProductsService.Update(productId, product.Price);

                _errorMessage = "";

                Snackbar.Add("Product detail updated sucessfully", Severity.Success);
                goBack();
            }
            else if (Password == null)
            {
                Snackbar.Add("Enter Password", Severity.Info);
            }
            else
            {
                Snackbar.Add("Invalid Password", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }
}