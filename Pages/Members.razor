@page "/members"
@inject NavigationManager NavManager
@inject IDialogService Diaglog

@using BisleriumCafe.Data
@using BisleriumCafe.Data.Services
@using BisleriumCafe.Data.Models
@inject ISnackbar Snackbar


<MudContainer Class="mt-8">    
    <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@AllMembers" Hover="true" Striped="false" Filter="new Func<Member,bool>(FilterHandler)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Members</MudText>
            <MudSpacer />
            <MudTextField T="string" @bind-Value="toSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
            <MudSpacer />
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="OpenDialog">Add Member</MudButton>
            <MudSpacer/>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel Enabled="true" InitialDirection="SortDirection.Ascending" SortBy="new Func<Member, object>(x => x.Number)">Phone Number</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Member, object>(x=>x.FirstName)">First Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Member, object>(x=>x.LastName)">Last Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Member, object>(x=>x.PurchaseCount)">Purchase Count</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Number">@context.Number</MudTd>
            <MudTd DataLabel="First Name">@context.FirstName</MudTd>
            <MudTd DataLabel="Last Name">@context.LastName</MudTd>
            <MudTd DataLabel="Purchase Count">@context.PurchaseCount</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
     <DialogContent>
        <div style="width:500px;" class="d-flex flex-column gap-y-3">
            <MudText Typo="Typo.h6">Please Enter Member Details</MudText>
            <MudTextField @bind-Value="number" T="string" Required="true" Label="Number" RequiredError=" Number is required!" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="firstName" T="string" Required="true" Label="First Name" RequiredError=" First name is required!" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="lastName" T="string" Required="true" Label="Last Name" RequiredError=" Last name is required!" Variant="Variant.Outlined" />
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto" OnClick="HandleAddMember">Add</MudButton>
            <MudButton Variant="Variant.Filled" Class="mx-auto" OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

    @code{
    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }


    private IEnumerable<Member> AllMembers = new List<Member>();

    private string number { get; set; }
    private string firstName { get; set; }
    private string lastName { get; set; }
    private Member MemberModel { get; set; }

    private bool visible;


    protected override async Task OnInitializedAsync()
    {
        if (_globalState.CurrentUser == null)
        {
            NavManager.NavigateTo("/login");
        }

        AllMembers = MembersService.GetAll();

    }

    private string toSearch = ""; //String to use for searching in the table
    private Member selectedItem = null;


    private bool FilterHandler(Member item) => SearchFilter(item, toSearch);

    private bool SearchFilter(Member item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.Number.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private DialogOptions dialogOptions = new() { FullWidth = true };
    private void OpenDialog() => visible = true;

    private void closeDialogBox() => visible = false;

    private void Cancel() => visible = false;


    private async Task HandleAddMember()
    {
        try
        {
            MembersService.Create(firstName, lastName, number);
            Snackbar.Add("Member Created !", Severity.Success, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
            Reload();
            visible = false;
        }
        catch (Exception e)
        {
            Snackbar.Add("Incorrect Values!", Severity.Error, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
           
        }
    }

    private async void Reload()
    {
        AllMembers = MembersService.GetAll();
        StateHasChanged();
    }
}