@page "/orders"
@inject NavigationManager NavManager

@using BisleriumCafe.Data
@using BisleriumCafe.Data.Services
@using BisleriumCafe.Data.Models
@inject ISnackbar Snackbar
@using System.ComponentModel.DataAnnotations


<MudContainer Class="mt-8">
    <div class="row">
        <div class="col">
            <MudContainer>
                <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@AllProducts" Hover="true" Striped="false" Filter="new Func<Product,bool>(FilterHandler)" @bind-SelectedItem="selectedItem">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Products</MudText>
                        <MudSpacer />

                        <MudSpacer />
                        <MudTextField T="string" @bind-Value="toSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel Enabled="true" InitialDirection="SortDirection.Ascending" SortBy="new Func<Product, object>(x => x.ProductName)">Product Name</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x => x.ProductType)">Type</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x => x.Price)">Price</MudTableSortLabel></MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Product Name">@context.ProductName</MudTd>
                            <MudTd DataLabel="Type">@context.ProductType</MudTd>
                            <MudTd DataLabel="Price">@context.Price</MudTd>
                            <MudTd DataLabel="Actions">
                                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => handleAddItemInCart(context.ProductId, context.ProductName, context.ProductType.ToString(), context.Price))">Add To Cart</MudButton>
                            </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudContainer>
        </div>
        <div class="col">
            <MudContainer>
                    <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@Elements" Hover="true" Striped="false" @bind-SelectedItem="selectedOrderItem">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">OrderList</MudText>
                        <MudSpacer />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Product Name</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Price</MudTh>
                        <MudTh>Quantity</MudTh>
                        <MudTh>Total</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Product Name">@(context.ItemName)</MudTd>
                        <MudTd DataLabel="Type">@(context.ItemType)</MudTd>
                        <MudTd DataLabel="Price">@(context.ItemPrice)</MudTd>
                        <MudTd DataLabel="Quantity">@(context.Quantity)</MudTd>
                        <MudTd DataLabel="Total">@(context.TotalPrice)</MudTd>
                        <MudTd DataLabel="Actions">
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Rounded.Remove" OnClick="@(() => HandleItemDelete(context.OrderItemId.ToString()))">Delete</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                @if(@_globalState.OrderItems.Count == 0)
                {
                    <MudText Typo="Typo.h6" Class="mt-4 mx-auto">Cart is Empty</MudText>
                }
                else
                {
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 mx-auto" OnClick="@(() => NavManager.NavigateTo("/checkout"))">Checkout Order</MudButton>
                    </MudCardActions>
                }
            </MudContainer>
            
        </div>
    </div>
</MudContainer>

    @code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private IEnumerable<Product> AllProducts = new List<Product>();
    private IEnumerable<OrderItem> AllOrderItems = new List<OrderItem>();
    private string productName { get; set; }
    private float price { get; set; }
    private ProductType prodtype { get; set; }
    private Product ProductModel { get; set; }
    private string Number { get; set; }

    private OrderItem selectedOrderItem = null;
    private IEnumerable<OrderItem> Elements { set; get; } = new List<OrderItem>();



    protected override async Task OnInitializedAsync()
    {
        if (_globalState.CurrentUser == null)
        {
            NavManager.NavigateTo("/login");
        }

        AllProducts = ProductsService.GetAll();
        Elements = _globalState.OrderItems;
        AllOrderItems = OrderItemsService.GetAll();

    }

    private string toSearch = ""; //String to use for searching in the table
    private Product selectedItem = null;


    private bool FilterHandler(Product item) => SearchFilter(item, toSearch);

    private bool SearchFilter(Product item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.ProductName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void handleAddItemInCart(Guid coffeeID, string productName, string productType, float itemPrice)
    {
        OrderItemsService.AddItemInOrderItemList(_globalState.OrderItems, coffeeID, productName, productType, itemPrice);
        Elements = _globalState.OrderItems;
        Snackbar.Add("Added to cart", Severity.Success);
    }
    private void HandleItemDelete(string orderItemId)
    {
        try
        {
            OrderItemsService.DeleteItemInCart(_globalState.OrderItems, orderItemId);

            
            Reload();
            Snackbar.Add("Deleted item from Cart", Severity.Success);


        }
        catch (Exception e)
        {
            Snackbar.Add("Error while deleting!", Severity.Error, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
        }
    }
    
    private async void Reload()
    {
        Elements = _globalState.OrderItems;
        StateHasChanged();
    }

}