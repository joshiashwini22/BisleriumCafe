@page "/sales"
@*
@inject NavigationManager NavManager

@using BisleriumCafe.Data
@using BisleriumCafe.Data.Services
@using BisleriumCafe.Data.Models
@inject ISnackbar Snackbar
@using System.ComponentModel.DataAnnotations



                <MudContainer>
                    <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@Elements" Hover="true" Striped="false" @bind-SelectedItem="selectedItem">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">OrderList</MudText>
                            <MudSpacer />
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Product Name</MudTh>
                            <MudTh>Type</MudTh>
                            <MudTh>Price</MudTh>
                            <MudTh>Quantity</MudTh>
                            <MudTh>Total</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Product Name">@(context.AllSales.)</MudTd>
                            <MudTd DataLabel="Type">@(context.ItemType)</MudTd>
                            <MudTd DataLabel="Price">@(context.ItemPrice)</MudTd>
                            <MudTd DataLabel="Quantity">@(context.Quantity)</MudTd>
                            <MudTd DataLabel="Total">@(context.TotalPrice)</MudTd>
                            <MudTd DataLabel="Actions">
                                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Rounded.Remove" OnClick="@(() => HandleItemDelete(context.OrderItemId.ToString()))">Delete</MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
            </MudContainer>





@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private IEnumerable<Sales> AllSales = new List<Sales>();

    private Sales selectedItem = null;



    protected override async Task OnInitializedAsync()
    {
        if (_globalState.CurrentUser == null)
        {
            NavManager.NavigateTo("/login");
        }

        AllSales = SalesService.GetAll();

    }

    private string toSearch = ""; //String to use for searching in the table


    private bool FilterHandler(Product item) => SearchFilter(item, toSearch);

    private bool SearchFilter(Product item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.ProductName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    
} *@
@code{

}